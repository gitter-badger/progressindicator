************************************************************************* 
Quickstart
*************************************************************************

=========================================================================
Displaying a ProgressBar
=========================================================================

Using a ProgressBar in your code is very easy. Let us see some ways by
which we can show a functioning progress bar during a task.

-------------------------------------------------------------------------
Usage In a Loop
-------------------------------------------------------------------------

You can use an AdvancedProgressBar instance named `bar` to display a
ProgressBar. Here we are publishing the percentage of the task completed
to `bar`. Note that we need to call `begin` and `end` at appropriate time.

.. code:: python
   
   from progress_manager import AdvancedProgressBar
   bar = AdvancedProgressBar()
   bar.begin()
   for i in range(1000):
       bar.publish((i+1)/10)
   bar.end()

-------------------------------------------------------------------------
Wrapping a Generator
-------------------------------------------------------------------------

Let us define a generator that just yields numbers from 0 to n.

.. code:: python

   def generator(n):
       for x in range(n):
           yield x

You can wrap this generator with a ProgressBar instance and you should
get a nice progress indicator. Note that you should use a Non-deterministic
progress bar since there is no way to automatically calculate the progress
of a generator since it can even be infinite. 

.. code:: python

   for i in bar(generator(n)):
       time.sleep(0.01)
       
Also Note that, there is no need to call `begin`, `publish`, or `end`.
   
-------------------------------------------------------------------------
Wrapping a Iterator
-------------------------------------------------------------------------

Iterators can also be wrapped with a ProgressBar instance. Similar to a 
generator there is no need to call `begin`, `publish`, or `end`. If the
iterator provides a __len__ implementation, The progress is automatically
calculated, like in the following case.

.. code:: python

   for i in bar(range(n)):
       time.sleep(0.01)
   
-------------------------------------------------------------------------
Using with statement
-------------------------------------------------------------------------

To avoid calling `begin` and `end`, you can wrap your code using a with
statement that ensures that `begin` and `end` are automatically called
at appropriate times.

.. code:: python

   with AdvancedProgressBar() as bar:
       for i in range(n):
           time.sleep(0.01)
           bar.publish(100*(i+1)/n)
           
           
=========================================================================
Creating a Custom ProgressBar
=========================================================================

The default PrgressBar is enough for most purposes. But if you need to
customize the look of the ProgressBar, you can do so via `Extensions`.

-------------------------------------------------------------------------
Building The ProgressBar
-------------------------------------------------------------------------

ProgressManager takes a parameter named components which is an iterable
of string or extensions. Using this, you can customize the look of your
progress bar as per your wish. 

.. code:: python

   from progress_manager.core import ProgressManager
   from progress_manager.extensions import Percentage, Bar
   bar = ProgressManager(components=[Bar(), "Progress =", Percentage()])

-------------------------------------------------------------------------
Built-in Extensions
-------------------------------------------------------------------------

A large number of extensions are provided by default. More details on them
can be found in the API Reference.

* Bar
* BouncingBar
* Ellipses
* Alternator
* Spinner
* Loader
* Timer
* ETA
* Rate
* Percentage

-------------------------------------------------------------------------
Writing your own Extensions
-------------------------------------------------------------------------

Although the extensions provided by default should be enough, but you can
always create your own extensions. An Extension must inherit the `BaseExtension`
class in `progress_manager.base`. More detail on this can be found in the
API Reference.